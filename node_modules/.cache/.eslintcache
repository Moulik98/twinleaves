[{"C:\\Users\\soumy\\Desktop\\twinleaves\\src\\index.js":"1","C:\\Users\\soumy\\Desktop\\twinleaves\\src\\App.js":"2","C:\\Users\\soumy\\Desktop\\twinleaves\\src\\Redux\\store.js":"3","C:\\Users\\soumy\\Desktop\\twinleaves\\src\\Redux\\AppReducer\\reducer.js":"4","C:\\Users\\soumy\\Desktop\\twinleaves\\src\\Redux\\AppReducer\\actionTypes.js":"5","C:\\Users\\soumy\\Desktop\\twinleaves\\src\\Component\\AllRoutes.jsx":"6","C:\\Users\\soumy\\Desktop\\twinleaves\\src\\Component\\ProductDetails.jsx":"7","C:\\Users\\soumy\\Desktop\\twinleaves\\src\\Component\\Products.jsx":"8","C:\\Users\\soumy\\Desktop\\twinleaves\\src\\Redux\\AppReducer\\action.js":"9"},{"size":520,"mtime":1674900150672,"results":"10","hashOfConfig":"11"},{"size":181,"mtime":1674901611286,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":1674905415075,"results":"13","hashOfConfig":"11"},{"size":1388,"mtime":1674900150947,"results":"14","hashOfConfig":"11"},{"size":212,"mtime":1674900150922,"results":"15","hashOfConfig":"11"},{"size":421,"mtime":1674901611286,"results":"16","hashOfConfig":"11"},{"size":2530,"mtime":1674904948474,"results":"17","hashOfConfig":"11"},{"size":4593,"mtime":1674906216841,"results":"18","hashOfConfig":"11"},{"size":941,"mtime":1674901611286,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"13a4or7",{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},"C:\\Users\\soumy\\Desktop\\twinleaves\\src\\index.js",[],[],"C:\\Users\\soumy\\Desktop\\twinleaves\\src\\App.js",[],[],"C:\\Users\\soumy\\Desktop\\twinleaves\\src\\Redux\\store.js",[],[],"C:\\Users\\soumy\\Desktop\\twinleaves\\src\\Redux\\AppReducer\\reducer.js",["51"],[],"import * as types from './actionTypes';\n\nconst initialState = {\n\n    productsData: []\n}\n\nconst reducer =  (oldState = initialState, action) => {\n\n    const {type, payload} = action;\n\n    switch (type) {\n        case types.GET_PRODUCTS_DATA: {\n            return { \n            ...oldState,\n            productsData: payload,\n            };\n        }\n        case types.ASC: {\n            return {\n              ...oldState,\n              productsData: [\n                ...oldState.productsData.sort((a, b) => a.mrp.mrp - b.mrp.mrp),\n              ],\n            };\n          }\n          case types.DESC: {\n            return {\n              ...oldState,\n              productsData: [\n                ...oldState.productsData.sort((a, b) => b.mrp.mrp - a.mrp.mrp),\n              ],\n            };\n        }\n        case types.FIlTER_BY_CATEGORY: {\n            return {\n              ...oldState,\n              productsData: [\n                ...oldState.productsData?.filter((elm) => elm.category_level_1 !== action.payload.value)\n              ]\n            };\n        }\n        case types.SEARCH_BY_NAME: {\n            return {\n              ...oldState,\n              productsData: [\n                ...oldState.productsData?.filter((elm) => elm.name == action.payload.value),\n              ],\n            };\n        }\n    default:\n        return oldState;\n    }\n}\n\nexport { reducer };","C:\\Users\\soumy\\Desktop\\twinleaves\\src\\Redux\\AppReducer\\actionTypes.js",[],[],"C:\\Users\\soumy\\Desktop\\twinleaves\\src\\Component\\AllRoutes.jsx",[],[],"C:\\Users\\soumy\\Desktop\\twinleaves\\src\\Component\\ProductDetails.jsx",["52"],[],"import React from 'react';\nimport {\n  Box,\n  Button,\n  Center,\n  Flex,\n  Heading,\n  Image,\n  Stack,\n  Text\n} from '@chakra-ui/react';\n\nconst ProductDetails = () => {\n\n    let details = JSON.parse(localStorage.getItem('resData'));\n    console.log('details', details);\n\n  return (\n    <div>\n        {\n            details.map((elm) => (\n                <Center py={5} key={elm.id} >\n                <Stack\n                  borderWidth=\"1px\"\n                  borderRadius=\"lg\"\n                  w={{ sm: '100%', md: '410px' }}\n                  height={{ sm: '450px', md: '23rem' }}\n                  direction={{ base: 'column', md: 'row' }}\n                  boxShadow={'2xl'}\n                  padding={4}\n                  key={elm.id}\n                  >\n                  <Flex flex={1}>\n                    <Image\n                      objectFit=\"cover\"\n                      boxSize=\"100%\"\n                      borderRadius='1rem'\n                      src= {\n                        elm.gs1_images?.front\n                      }\n                    />\n                  </Flex>\n                  <Stack\n                    flex={1}\n                    flexDirection=\"column\"\n                    justifyContent=\"center\"\n                    p={1}\n                    pt={2}\n                    >\n                    <Heading fontSize={'2xl'} fontFamily={'body'} color={'#43525d'} ml='1.5rem'>\n                      {\n                        elm.brand\n                      }\n                    </Heading>\n                    \n                    <Text\n                      fontWeight={500} color={'gray.500'} size=\"sm\" \n                      \n                      >\n                        { elm.name }\n                    </Text>\n                    <Text\n                      fontWeight={500} color={'gray.500'} size=\"sm\" \n                      px={3} pl={'1.5rem'}\n                      >\n                        Category : {elm.category_level_1}\n                    </Text>\n                    <Stack align={'center'} justify={'center'} direction={'row'} mt={6}>\n                      <Box\n                        px={2}\n                        py={1}\n                        fontWeight={'700'}> \n                        <Text color='black' fontWeight={'400'} fontSize={'xl'}>Price: { elm.mrp.mrp} </Text>\n                      </Box>\n                    </Stack>\n                  </Stack>\n                </Stack>\n              </Center>\n              )) \n        }\n    </div>\n  )\n}\n\nexport default ProductDetails;","C:\\Users\\soumy\\Desktop\\twinleaves\\src\\Component\\Products.jsx",["53","54"],[],"import React, { useEffect, useState } from 'react';\nimport {\n  Box,\n  Select,\n  Center,\n  Flex,\n  Heading,\n  Image,\n  Stack,\n  Text,\n  Input,\n  Grid,\n  Button\n} from '@chakra-ui/react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getProductsData, sortHandler,filterHandler, filterByName } from '../Redux/AppReducer/action';\nimport './response.css';\nimport { useNavigate } from 'react-router';\n\nconst Products = () => {\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const data = useSelector((store) => store.App.productsData)\n  console.log(data);\n \n\n  useEffect(() => {\n  dispatch(getProductsData());\n  },[])\n\n  function filterHandle (e) {\n    dispatch(filterHandler(e));\n  }\n\n  function filterProduct (e) {\n    dispatch(filterByName(e));\n  }\n\n\n  function sortHandle(e) {\n    dispatch(sortHandler(e))\n    \n    }\n\n  let arr = JSON.parse(localStorage.getItem('resData')) || [];\n\n    const getDetails = (elm) => {\n      console.log(elm);\n      arr.push(elm);\n      localStorage.setItem('resData', JSON.stringify(arr));\n      navigate('/details')\n    }\n\n  return (\n    <div>\n    \n    <Heading style= {{\n      color: 'purple',\n      padding: '15px'\n    }} mr={'5rem'}>Products</Heading>\n    <Stack spacing={3} w={'18rem'} ml={'30rem'} mt={'2rem'}>\n    <Input variant='flushed' placeholder='Search for Product' onChange ={filterProduct} />\n    <Select \n    placeholder='Filter by Product Category' \n    variant='flushed'\n    onChange={filterHandle}\n    >\n    <option value='Diapers & Wipes'>Diapers & Wipes</option>\n    <option value='Feeding & Nursing'>Feeding & Nursing</option>\n    </Select>\n\n    <Select \n    placeholder='Sort by Product Price' \n    variant='flushed'\n    onChange={sortHandle}\n    >\n    <option value='1'>Asc</option>\n    <option value='2'>Des</option>\n    </Select>\n    </Stack>\n    <Grid templateColumns='repeat(3, 1fr)' gap={2} className='res'>\n    {\n        data.map((elm) => (\n          <Center py={5} key={elm.id} >\n          <Stack\n            borderWidth=\"1px\"\n            borderRadius=\"lg\"\n            w={{ sm: '100%', md: '400px' }}\n            height={{ sm: '450px', md: '23rem' }}\n            direction={{ base: 'column', md: 'row' }}\n            boxShadow={'2xl'}\n            padding={4}\n            key={elm.id}\n            >\n            <Flex flex={1}>\n              <Image\n                objectFit=\"cover\"\n                boxSize=\"90%\"\n                borderRadius='1rem'\n                src= {\n                  elm.gs1_images?.front\n                }\n              />\n            </Flex>\n            <Stack\n              flex={1}\n              flexDirection=\"column\"\n              justifyContent=\"center\"\n              p={1}\n              pt={2}\n              >\n              <Heading fontSize={'2xl'} fontFamily={'body'} color={'#43525d'} ml='1.5rem'>\n                {\n                  elm.brand\n                }\n              </Heading>\n              \n              <Text\n                fontWeight={500} color={'gray.500'} size=\"sm\" \n                \n                >\n                  { elm.name }\n              </Text>\n              <Text\n                fontWeight={500} color={'gray.500'} size=\"sm\" \n                px={3} pl={'1.5rem'}\n                >\n                  Category : {elm.category_level_1}\n              </Text>\n              <Stack align={'center'} justify={'center'} direction={'row'} mt={6}>\n                <Box\n                  px={2}\n                  py={1}\n                  fontWeight={'700'}> \n                  <Text color='black' fontWeight={'400'} fontSize={'xl'}>Price: { elm.mrp.mrp} </Text>\n                </Box>\n              </Stack>\n              <Stack\n                width={'100%'}\n                mt={'2rem'}\n                direction={'row'}\n                padding={2}\n                justifyContent={'space-between'}\n                alignItems={'center'}>\n                <Button\n                  flex={1}\n                  fontSize={'sm'}\n                  rounded={'full'}\n                  bg={'blue.400'}\n                  color={'white'}\n                  boxShadow = {\n                    '0px 1px 25px -5px rgb(66 153 225 / 48%), 0 10px 10px -5px rgb(66 153 225 / 43%)'\n                  }\n                  _hover={{\n                    bg: 'green.500',\n                  }}\n                  onClick={() => getDetails(elm)}\n                  >\n                  Know More\n                </Button>\n              </Stack>\n            </Stack>\n          </Stack>\n        </Center>\n        ))\n      }\n   </Grid>\n  </div>\n  )\n}\n\nexport default Products;","C:\\Users\\soumy\\Desktop\\twinleaves\\src\\Redux\\AppReducer\\action.js",["55"],[],"import * as types from './actionTypes';\n\nconst getProductsData = () => async (dispatch) => {\n    \n    try {\n    let res = await fetch(`https://originhighway-staging-kxyaws5ixa-uc.a.run.app/proxy/catalog/products`)\n    let data = await res.json()\n   dispatch({\n            type: types.GET_PRODUCTS_DATA,\n            payload: data.data.products,\n        })\n    }\n    catch(err) {\n        console.log(err);\n    }\n  };\n\nconst sortHandler = data => dispatch => {\n    if ( data.target.value == \"1\") {\n      dispatch({type :types.ASC })\n    }else {\n\n      dispatch({type :types.DESC})\n    }\n  }\n\nconst filterHandler = d => dispatch => {\n     dispatch({\n        type :types.FIlTER_BY_CATEGORY,\n        payload: d.target.value\n    })\n  }\n\nconst filterByName = p => dispatch => {\n      dispatch({\n        type :types.SEARCH_BY_NAME,\n        payload: p.target.value\n    })\n  }\n  \n\n  export { getProductsData, sortHandler, filterByName, filterHandler };",{"ruleId":"56","severity":1,"message":"57","line":47,"column":68,"nodeType":"58","messageId":"59","endLine":47,"endColumn":70},{"ruleId":"60","severity":1,"message":"61","line":4,"column":3,"nodeType":"62","messageId":"63","endLine":4,"endColumn":9},{"ruleId":"60","severity":1,"message":"64","line":1,"column":28,"nodeType":"62","messageId":"63","endLine":1,"endColumn":36},{"ruleId":"65","severity":1,"message":"66","line":29,"column":5,"nodeType":"67","endLine":29,"endColumn":7,"suggestions":"68"},{"ruleId":"56","severity":1,"message":"57","line":19,"column":28,"nodeType":"58","messageId":"59","endLine":19,"endColumn":30},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["69"],{"desc":"70","fix":"71"},"Update the dependencies array to be: [dispatch]",{"range":"72","text":"73"},[649,651],"[dispatch]"]